#include "imports/stdlib.fc";
#include "main-utils.fc";

;; op codes
const op::transfer_ownership = 0x2da38aaf;
const op::create_factory = 42;

;; error codes
const error::access_denied = 102;

;; storage variables
global slice owner_address;
global cell factory_code;

;; load_data populates storage variables using stored data
(slice, cell) load_data() impure {
    var ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; owner_address
        ds~load_ref() ;; factory_code
    );
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_slice(owner_address)
            .store_ref(factory_code)
            .end_cell()
    );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    if (op == op::transfer_ownership) {
        throw_unless(error::access_denied, equal_slices(sender_address, owner_address));
        owner_address = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }

    if (op == op::create_factory) {
        cell state_init = calculate_factory_state_init(sender_address, factory_code);
        slice new_factory_address = calculate_factory_address(state_init);
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init);
        send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

slice get_owner_address() method_id {
    (slice owner_address, cell factory_code) = load_data();
    return owner_address;
}

;; retrieve factory address giving a wallet address parameter
;; calculate the factory address instead of storing it in the contract in a dictionary
slice get_wallet_factory_address(slice wallet_address) method_id {
    (slice owner_address, cell factory_code) = load_data();
    return calculate_user_factory_address(wallet_address, factory_code);
}